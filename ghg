import React, { useState, useRef, useEffect } from 'react';
import '../styles/home.css';
import Navbar from '../navabar';
import CodeEditor from '../CodeEditor';
import OutputDisplay from '../OutputDisplay.js';
import './styles/collabHome.css';
import toast from 'react-hot-toast';
import ACTIONS from './Actions.js';
import Client from './components/client-avatar';
import { initSocket } from './socket';
import {
  useLocation,
  useNavigate,
  Navigate,
  useParams,
} from 'react-router-dom';

function CollabHome() {
  const socketRef = useRef(null);
  const codeRef = useRef(null);
  const location = useLocation();
  const { roomId } = useParams();
  const reactNavigator = useNavigate();
  const [clients, setClients] = useState([]);

  useEffect(() => {
    const init = async () => {
      socketRef.current = await initSocket();
      socketRef.current.on('connect_error', (err) => handleErrors(err));
      socketRef.current.on('connect_failed', (err) => handleErrors(err));

      function handleErrors(e) {
        console.log('socket error', e);
        toast.error('Socket connection failed, try again later.');
        reactNavigator('/');
      }

      socketRef.current.emit(ACTIONS.JOIN, {
        roomId,
        username: location.state?.username,
      });

      // Listening for joined event
      socketRef.current.on(
        ACTIONS.JOINED,
        ({ clients, username, socketId }) => {
          if (username !== location.state?.username) {
            toast.success(`${username} joined the room.`);
            console.log(`${username} joined`);
          }
          setClients(clients);
          socketRef.current.emit(ACTIONS.SYNC_CODE, {
            code: codeRef.current,
            socketId,
          });
        }
      );

      // Listening for disconnected
      socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId, username }) => {
        toast.success(`${username} left the room.`);
        setClients((prev) => {
          return prev.filter((client) => client.socketId !== socketId);
        });
      });
    };
    init();
    return () => {
      socketRef.current.disconnect();
      socketRef.current.off(ACTIONS.JOINED);
      socketRef.current.off(ACTIONS.DISCONNECTED);
    };
  });

  async function copyRoomId() {
    try {
      await navigator.clipboard.writeText(roomId);
      toast.success('Room ID has been copied to your clipboard');
    } catch (err) {
      toast.error('Could not copy the Room ID');
      console.error(err);
    }
  }

  function leaveRoom() {
    reactNavigator('/');
  }

  if (!location.state) {
    return <Navigate to="/" />;
  }
  return (
    <>
      <Navbar />

      <div className="collab-wrapper">
        <div className="aside-wrapper">
          <h3>Comnnected</h3>
          <div className="clientsList">
            {clients.map((client) => (
              <Client key={client.socketId} username={client.username} />
            ))}
          </div>
          <button className="btn copyBtn" onClick={copyRoomId}>
            Copy ROOM ID
          </button>
          <button className="btn leaveBtn" onClick={leaveRoom}>
            Leave
          </button>
        </div>
        <div className="editor-window">
          <div className="options">
            <div className="langHead">
              <h3>Hello</h3>
            </div>
            <div className="btn">
              <button className="button-68">Compile</button>
            </div>
          </div>

          <div className="codeEditor">
            <CodeEditor />
          </div>
        </div>
        <div className="outputWindow">
          <div className="options">
            <div className=" langHead">
              <h3> output : </h3>
            </div>
          </div>
          <div className="outputDisplay">
            <OutputDisplay />
          </div>
        </div>
      </div>
    </>
  );
}

export default CollabHome;
